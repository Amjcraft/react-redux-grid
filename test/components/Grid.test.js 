import expect from 'expect';
import React from 'react';
import ReactDOM from 'react-dom';
import TestUtils from 'react-addons-test-utils';
import { keyGenerator } from '../../src/util/keygenerator';
import { Grid } from '../../src/components/Grid.jsx';
import { setup, mockStore, mockReducer } from '../util/index';
import { gridColumns, localGridData, gridActions } from '../util/data';


const props = {
    data: localGridData,
    columns: gridColumns,
    store: mockStore({}, ...gridActions)
};

function grid(state) {
    const element = React.createElement(Grid, state);
    const renderer = TestUtils.createRenderer();
    renderer.render(element);
    return renderer.getRenderOutput();
}

describe('Grid Function Execution', () => {
    const grid = <Grid { ...props } />;
    const internalProps = grid.props;

    it('Should be rendered with correct props', () => {

        expect(internalProps.columns).toEqual(props.columns);
        expect(internalProps.data).toEqual(props.data);
        expect(internalProps.pageSize).toEqual(25);

    });

});

describe('Grid to error without a store and/or columns', () => {

    const propsWithoutStore = {
        data: localGridData,
        columns: gridColumns
    };

    const propsWithoutColumns = {
        data: localGridData,
        store: mockStore({}, ...gridActions)
    };

    it('Should throw an error without a store', () => {
        expect(grid.bind(grid, propsWithoutStore)).toThrow('Component must be intialized with a valid store');
    }); 

    it('Should throw an error without columns array', () => {
        expect(grid.bind(grid, propsWithoutColumns)).toThrow('A columns array is required');
    });

});
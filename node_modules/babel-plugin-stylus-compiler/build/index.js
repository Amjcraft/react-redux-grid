'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _autoprefixerStylus = require('autoprefixer-stylus');

var _autoprefixerStylus2 = _interopRequireDefault(_autoprefixerStylus);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _stylus = require('stylus');

var _stylus2 = _interopRequireDefault(_stylus);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
  MODULE REGEX WILL RETURN STYLUS NODE_MODULE IMPORT

  WILL RETURN TRUE FOR
  * @import '~module'
  * @require '~another-module'

  WILL RETURN FALSE FOR
  * @require 'module.styl'
  * @require 'module'
  * div ~ input 
*/

/* global process */

var MODULE_REGEX = /(~*@).*/;

var fileExists = function fileExists(filename) {
  try {
    var stats = _fs2.default.statSync(filename);
    return stats.isFile(filename);
  } catch (e) {
    if (e.code === 'ENOENT') {
      return false;
    } else {
      throw Error(e);
    }
  }
};

var compileStylusFile = function compileStylusFile(jsFile, stylusFile) {
  // try to resolve as file path
  var from = resolveModulePath(jsFile);
  var path = (0, _path.resolve)(from, stylusFile);
  if (!fileExists(path)) {
    // try to resolve from node modules
    path = (0, _path.resolve)('./node_modules', stylusFile);
  }

  if (!fileExists(path)) {
    throw Error('Cannot find stylus file: ' + stylusFile);
  }

  var stylusContent = _fs2.default.readFileSync(path, 'utf8');

  if (stylusContent.match(MODULE_REGEX) !== null) {
    var match = stylusContent.match(MODULE_REGEX);
    stylusContent = stylusContent.replace(MODULE_REGEX, match[0].replace('~', ''));
  }

  return (0, _stylus2.default)(stylusContent).include((0, _path.dirname)(path)).include((0, _path.resolve)('./node_modules')).use((0, _autoprefixerStylus2.default)()).render().replace(/\n/g, ' ');
};

var resolveModulePath = function resolveModulePath(filename) {
  var dir = (0, _path.dirname)(filename);
  if ((0, _path.isAbsolute)(dir)) return dir;
  if (process.env.PWD) return (0, _path.resolve)(process.env.PWD, dir);
  return (0, _path.resolve)(dir);
};

exports.default = function (_ref) {
  var t = _ref.types;

  return {
    visitor: {
      ImportDeclaration: function ImportDeclaration(path, state) {
        var node = path.node;
        if (node && node.source && node.source.value && node.source.type === 'StringLiteral' && node.source.value.endsWith('.styl')) {
          var jsFile = state.file.opts.filename;
          var stylusFile = node.source.value;
          var css = compileStylusFile(jsFile, stylusFile);
          if (node.specifiers && node.specifiers.length > 0) {
            // import into variable
            var id = node.specifiers[0].local.name;
            path.replaceWith(t.variableDeclaration('var', [t.variableDeclarator(t.identifier(id), t.stringLiteral(css))]));
          } else {
            // import without variable (inject into head)

            // var _css = document.createElement('style');
            var docCreateElement = t.memberExpression(t.identifier('document'), t.identifier('createElement'));
            var createStyleTag = t.callExpression(docCreateElement, [t.stringLiteral('style')]);
            var styleTagVar = path.scope.generateUidIdentifier('css');
            var styleTagVarDeclarator = t.variableDeclarator(styleTagVar, createStyleTag);
            var declareCssVar = t.variableDeclaration('var', [styleTagVarDeclarator]);

            // _css.innerHTML = '{css from imported file}'
            var cssInnerHTML = t.memberExpression(styleTagVar, t.identifier('innerHTML'));
            var setCssFromFile = t.assignmentExpression('=', cssInnerHTML, t.stringLiteral(css));

            // document.head.appendChild(_css)
            var headAppendChild = t.memberExpression(t.identifier('document.head'), t.identifier('appendChild'));
            var appendToHead = t.callExpression(headAppendChild, [styleTagVar]);

            path.replaceWithMultiple([declareCssVar, setCssFromFile, appendToHead]);
          }
        }
      }
    }
  };
};